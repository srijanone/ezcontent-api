<?php

/**
 * @file
 * Module implementation file.
 */

use Drupal\Core\Url;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

use Drupal\ezcontent_preview\Ajax\PreviewContentCommand;

/**
 * Implements hook_views_data_alter().
 */
function ezcontent_preview_views_data_alter(&$data) {
  $label = 'Published or Access Unpublished Token';
  $data['node']['published_access_unpublished_token'] = [
    'title' => $label,
    'filter' => [
      'title' => $label,
      'help' => t('Published or Access unpublish content with token'),
      'field' => 'nid',
      'id' => 'published_access_unpublished_token',
    ],
  ];
}

/**
 * Implements hook_help().
 */
function ezcontent_preview_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ezcontent_preview module.
    case 'help.page.ezcontent_preview':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Defines preview feature for content/node preview.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function ezcontent_preview_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // Attached library at form levels.
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof ContentEntityForm) {
    if ($form_object->getEntity()->getEntityTypeId() === 'node') {
      // Only if there are router enabled.
      $entity = $form_object->getEntity();
      if ($entity->id()) {
        $libs = ezcontent_preview_add_libraries($entity);
        if ($libs) {
          $form['#attached']['library'][] = $libs;
          // Hide core preview if enabled.
          if (isset($form['actions']['preview'])) {
            $form['actions']['preview']['#type'] = 'hidden';
          }
          // New preview button.
          $form['actions']['ezcontent_preview'] = [
            '#type' => 'submit',
            '#value' => t('Preview'),
            '#weight' => 20,
            '#attributes' => [
              'class' => ['ezcontent-preview--preview-btn'],
            ],
            '#ajax' => [
              'callback' => '_ezcontent_preview_submit_ajax_form',
            ],
          ];
        }
      }
    }
  }
}

/**
 * Ajax submit ajax handler form.
 *
 * @param array $form
 *   From array Object.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   Form State object.
 *
 * @return bool
 *   Returns ajax response.
 */
function _ezcontent_preview_submit_ajax_form(array &$form, FormStateInterface $form_state) {

  // Early return if error found.
  $response = new AjaxResponse();
  if (!empty($form_state->getErrors())) {
    $message = [
      '#theme' => 'status_messages',
      '#message_list' => \Drupal::messenger()->all(),
    ];
    $messages = \Drupal::service('renderer')->render($message);
    $response->addCommand(new HtmlCommand('.region-highlighted', $messages));

    return $response;
  }

  $form_id = $form_state->getFormObject()->getFormId();
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof ContentEntityForm) {
    $entity = $form_object->getEntity();
    // Service used to store uuid and respective form object in memory.
    $temp_store = \Drupal::service('tempstore.private');
    $store = $temp_store->get('node_preview');
    $entity->in_preview = TRUE;
    $uuid = $entity->uuid();
    // Setting storage for preview.
    $store->set($uuid, $form_state);

    $utils = \Drupal::service('ezcontent_preview.utils');
    $decoupledRoutes = $utils->getNodeDecoupledRoutes($entity);
    $response->addCommand(new PreviewContentCommand($decoupledRoutes));
  }
  return $response;
}

/**
 * Common function for adding libraries.
 */
function ezcontent_preview_add_libraries($entity) {
  if ($entity->getEntityTypeId() === 'node') {
    $utils = \Drupal::service('ezcontent_preview.utils');
    $decoupledRoutes = $utils->getNodeDecoupledRoutes($entity);
    if ($decoupledRoutes) {
      return 'ezcontent_preview/content_preview-library';
    }
  }
}
